#!/bin/bash

function detect_libtorrent_rasterbar_conflict() {
    called_by=$1
    libtorrent_libnames=(libtorrent-rasterbar python3-libtorrent python-libtorrent libtorrent-rasterbar7 libtorrent-rasterbar8 libtorrent-rasterbar9 libtorrent-rasterbar-dev)
    conflicting_libtorrent_packages=()
    for lib in "${libtorrent_libnames[@]}"; do
        if dpkg -s $lib > /dev/null 2>&1 && ! dpkg -s $lib | grep static > /dev/null 2>&1; then
            staticconflict=true
            conflicting_libtorrent_packages+=($lib)
        fi
    done
    if [[ ${#conflicting_libtorrent_packages[@]} -gt 0 ]]; then
        (
            IFS=$'\n'
            echo_warn "The following packages have been detected but are not statically built:\n${conflicting_libtorrent_packages[*]}"
        )
    fi
    if [[ $staticconflict == true ]]; then
        echo_warn "Shared library/repository libtorrent build method detected. In order to continue, your server will compile static libtorrent libraries."
        if ask "Do you agree? Vendor customizations or patches will be lost unless you provide a patch yourself (/root/libtorrent-{RC_1_1,RC_1_2}.patch).
        No changes will be made if you say no."; then
            libtorrent_resolve_shared_conflict
        else
            echo_info "Install will now exit"
            exit 1
            #Artifact code atm
            #sharedlibtorrent=true
            #for lib in "${conflicting_libtorrent_packages[@]}"; do
            #    case ${lib} in
            #        libtorrent-rasterbar)
            #            libtorrentsharedversion=$(strings /usr/local/lib/libtorrent-rasterbar.so | grep libtorrent/ | cut -d/ -f2)
            #            ;;
            #       libtorrent-rasterbar[789])
            #            libtorrentsharedversion=$(get_candidate_version ${lib})
            #            ;;
            #        *)
            #            echo_error "Libtorrent version could not be determined."
            #            exit 1
            #            ;;
            #    esac
            #done
        fi
    fi
}

function libtorrent_resolve_shared_conflict() {
    if [[ -f /install/.deluge.lock ]] && [[ -z ${DELUGE_VERSION} ]]; then
        deluge_version=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+')
        case $deluge_version in
            1.3.*)
                DELUGE_VERSION=1.3-stable
                ;;
            *)
                DELUGE_VERSION=master
                ;;
        esac
    fi
    if [[ -f /install/.qbittorrent.lock ]] && [[ -z ${QBITTORRENT_VERSION} ]]; then
        QBITTORRENT_VERSION=$(qbittorrent-nox --version 2> /dev/null | grep -oP '\d+\.\d+\.\d+')
    fi
    apt_remove "${conflicting_libtorrent_packages[@]}"
    if [[ -n $DELUGE_VERSION && ! ${called_by} == deluge && "${conflicting_libtorrent_packages[*]}" =~ python ]]; then
        #shellcheck source=sources/functions/deluge
        . /etc/swizzin/sources/functions/deluge
        . /etc/swizzin/sources/functions/fpm
        echo_info "Recompiling Deluge for compatibility before continuing"
        install_fpm
        apt_remove --purge '^deluge.*'
        deluge_version_info
        build_libtorrent_deluge
        build_deluge
        unset DELUGE_VERSION
    fi
    if [[ -n $QBITTORRENT_VERSION && ! ${called_by} == qbittorrent ]]; then
        #shellcheck source=sources/functions/qbittorrent
        . /etc/swizzin/sources/functions/qbittorrent
        . /etc/swizzin/sources/functions/deluge
        echo_info "Recompiling qBittorrent for compatibility before continuing"
        install_fpm
        apt_remove --purge qbittorrent-nox
        qbittorrent_version_info
        build_libtorrent_qbittorrent
        build_qbittorrent
        unset QBITTORRENT_VERSION
    fi
}

function resolve_libtorrent_rasterbar_repo_conflict() {
    called_by=$1
    if [[ -f /install/.deluge.lock ]] && [[ -z $deluge ]]; then
        deluge_version=$(deluged -v | grep deluged | grep -oP '\d+\.\d+\.\d+')
        function=$deluge_version
        case $deluge_version in
            1.3.*)
                DELUGE_VERSION=1.3-stable
                ;;
            *)
                DELUGE_VERSION=master
                ;;
        esac
    fi
    if [[ -f /install/.qbittorrent.lock ]] && [[ -z $QBITTORRENT_VERSION ]]; then
        QBITTORRENT_VERSION=$(qbittorrent-nox --version 2> /dev/null | grep -oP '\d+\.\d+\.\d+')
    fi
    if [[ -n $DELUGE_VERSION && ! ${called_by} == deluge ]]; then
        #shellcheck source=sources/functions/deluge
        . /etc/swizzin/sources/functions/deluge
        . /etc/swizzin/sources/functions/fpm
        echo_info "Reinstalling Deluge from apt before continuing"
        whiptail_deluge_downupgrade
        apt_remove --purge ^deluge.*
        apt_install_deluge
    fi
    if [[ -n $QBITTORRENT_VERSION && ! ${called_by} == qbittorrent ]]; then
        #shellcheck source=sources/functions/qbittorrent
        . /etc/swizzin/sources/functions/qbittorrent
        . /etc/swizzin/sources/functions/deluge
        echo_info "Reinstalling qBittorrent from apt before continuing"
        apt_remove --purge qbittorrent-nox
        apt_install qbittorrent-nox
    fi
    unset QBITTORRENT_VERSION
    unset DELUGE_VERSION
}

function whiptail_skip_libtorrent_rasterbar() {
    if (whiptail --title "Skip Libtorrent?" --yesno "Setup has determined that you can skip compiling/reinstalling libtorrent. Do you want to?" 12 50); then
        true
    else
        false
    fi
}

function check_libtorrent_rasterbar_method() {
    if [[ -n $LIBTORRENT_RASTERBAR_METHOD ]] && [[ ! $(swizdb get "libtorrent_rasterbar_method") == "${LIBTORRENT_RASTERBAR_METHOD}" ]]; then
        swizdb set "libtorrent_rasterbar_method" "${LIBTORRENT_RASTERBAR_METHOD}"
    fi
    if ! swizdb get "libtorrent_rasterbar_method" > /dev/null 2>&1; then
        whiptail_libtorrent_rasterbar_method
    fi
    if [[ -z ${LIBTORRENT_RASTERBAR_METHOD} ]]; then
        LIBTORRENT_RASTERBAR_METHOD=$(swizdb get libtorrent_rasterbar_method)
    fi
}

function whiptail_libtorrent_rasterbar_method() {
    if (whiptail --title "Compile or Repo?" --yesno --yes-button "Repo" --no-button "Compile" "You must choose between repository or compiled method for Libtorrent (and Deluge/qBittorrent). Which do you want to choose? NOTE: This choice will affect the install method of all libtorrent-based applications. If you choose repo, then you will not be able to compile Deluge or qBittorrent yourself. See docs for further info." 15 50); then
        swizdb set "libtorrent_rasterbar_method" repo
    else
        swizdb set "libtorrent_rasterbar_method" compile
    fi
}

function apt_install_libtorrent_rasterbar() {
    release=$(lsb_release -cs)
    cleanup=(python3-libtorrent python-libtorrent libtorrent-rasterbar libtorrent-rasterbar-dev)
    for a in ${cleanup[@]}; do
        if dpkg -l | grep $a | grep swizzin > /dev/null 2>&1; then
            echo_info "Found $a. Removing."
            dpkg -r $a > /dev/null 2>&1
        fi
    done
    case $release in
        "xenial")
            apt_install libtorrent-rasterbar8 python-libtorrent python3-libtorrent libtorrent-rasterbar-dev pkg-config
            ;;
        "stretch" | "buster" | "bionic")
            apt_install libtorrent-rasterbar9 python-libtorrent python3-libtorrent libtorrent-rasterbar-dev pkg-config
            ;;
        *)
            apt_install libtorrent-rasterbar9 python3-libtorrent libtorrent-rasterbar-dev pkg-config
            ;;

    esac
}

function booststrap() {
    BOOST_VERSION=1_75_0
    export BOOST_ROOT=/opt/boost_${BOOST_VERSION}
    export BOOST_INCLUDEDIR=${BOOST_ROOT}
    export BOOST_BUILD_PATH=${BOOST_ROOT}
    if [[ ! -d ${BOOST_ROOT} ]]; then
        cd /opt
        wget https://dl.bintray.com/boostorg/release/${BOOST_VERSION//_/.}/source/boost_${BOOST_VERSION}.tar.gz >> ${log} 2>&1
        tar xvf boost_${BOOST_VERSION}.tar.gz >> ${log} 2>&1
        rm -f boost_${BOOST_VERSION}.tar.gz
        cd ${BOOST_ROOT}
        /opt/boost_${BOOST_VERSION}/bootstrap.sh --with-libraries=system >> ${log} 2>&1
    fi
}
